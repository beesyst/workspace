# .github/workflows/toc.yml
name: Auto Cheatsheets TOC

on:
  push:
    branches: [ main ]
    paths:
      - 'cheatsheets/**/*.md'
      - 'README.md'
      - '.github/workflows/toc.yml'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-toc:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Гарантируем плейсхолдеры doctoc сразу после первого H1
      - name: Ensure doctoc placeholders exist after first H1
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(find cheatsheets -type f -name '*.md' | sort)
          for FILE in "${FILES[@]}"; do
            if ! grep -q "<!-- START doctoc" "$FILE"; then
              awk '
                BEGIN{placed=0}
                placed==0 && /^# / {
                  print
                  print ""
                  print "<!-- START doctoc -->"
                  print "<!-- END doctoc -->"
                  print ""
                  placed=1
                  next
                }
                { print }
              ' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
            fi
          done

      # Генерим TOC во всех шпаргалках
      - name: Generate TOC in cheatsheets
        run: npx -y doctoc cheatsheets --github --maxlevel 3 --title "## Оглавление"

      # Собираем сводный список в README как <details> (скрывающийся список)
      - name: Inject cheatsheets TOC into README
        shell: bash
        run: |
          set -euo pipefail
          README="README.md"
          TOC_START="<!-- START:cheatsheets-toc -->"
          TOC_END="<!-- END:cheatsheets-toc -->"

          # Сбор контента
          TMP="$(mktemp)"
          {
            echo "$TOC_START"
            echo
            mapfile -t FILES < <(find cheatsheets -type f -name '*.md' | sort)
            for FILE in "${FILES[@]}"; do
              REL="$FILE"
              TITLE="$(grep -m1 -E '^# ' "$FILE" | sed 's/^# \+//; s/\r$//')"
              if [[ -z "$TITLE" ]]; then
                BASE="$(basename "$FILE" .md)"
                TITLE="$(echo "$BASE" | sed 's/-/ /g; s/\b\(.\)/\u\1/g')"
              fi

              # Вытаскиваем doctoc-блок, выкидываем заголовок "## Оглавление" и комменты doctoc, чиним якоря
              TOC_CONTENT="$(awk '/<!-- START doctoc -->/{f=1;next} /<!-- END doctoc -->/{f=0} f' "$FILE" \
                | sed -E '1{/^##[[:space:]]+(Оглавление|Table of Contents)$/Id;}' \
                | sed -E '/^<!--/d' \
                | sed "s|](#|]($REL#|g")"

              echo "<details>"
              printf '  <summary><strong><a href="%s">%s</a></strong></summary>\n\n' "$REL" "$TITLE"
              # если есть подпункты — печатаем, иначе просто пустая строка
              if [[ -n "$TOC_CONTENT" ]]; then
                printf '%s\n\n' "$TOC_CONTENT"
              else
                echo
              fi
              echo "</details>"
              echo
            done
            echo "$TOC_END"
          } > "$TMP"

          # Надёжно заменяем блок между маркерами
          awk -v start="$TOC_START" -v end="$TOC_END" -v f="$TMP" '
            BEGIN{inblk=0}
            {
              if ($0==start) {
                print $0
                while ((getline l < f) > 0) print l
                inblk=1; next
              }
              if ($0==end) { inblk=0; next }  # старый блок пропускаем до END
              if (!inblk) print $0
            }
          ' "$README" > "$README.tmp" && mv "$README.tmp" "$README"

      # Создаём/обновляем PR, не пушим прямо в main
      - name: Create/Update PR
        uses: peter-evans/create-pull-request@v6
        with:
          branch: bot/toc-update
          commit-message: "docs(toc): auto update cheatsheets TOC"
          title: "docs(toc): auto update cheatsheets TOC"
          body: "Automated TOC update by GitHub Actions."
          author: "github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
          labels: docs, automation
