name: Auto Cheatsheets TOC

on:
  push:
    branches: [ main ]
    paths:
      - 'cheatsheets/**/*.md'
      - 'README.md'
      - '.github/workflows/toc.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-toc:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - uses: actions/setup-node@v4
        with: { node-version: '20' }

      # 1) Убедимся, что в README есть единственная пара маркеров под разделом Шпаргалки
      - name: Normalize README markers (single START/END, insert if missing)
        shell: bash
        run: |
          set -euo pipefail
          README="README.md"
          START="<!-- START:cheatsheets-toc -->"
          END="<!-- END:cheatsheets-toc -->"

          if ! grep -qF "$START" "$README"; then
            awk -v start="$START" -v end="$END" '
              BEGIN{inserted=0}
              /^###[[:space:]]+Шпаргалки *\(`?cheatsheets\/`?\)/ && !inserted {
                print; print ""; print start; print end; print "";
                inserted=1; next
              }
              { print }
            ' "$README" > "$README.tmp" && mv "$README.tmp" "$README"
          fi

          # Оставляем только первую пару маркеров и выбрасываем любые дубликаты
          awk -v start="$START" -v end="$END" '
            BEGIN{seen=0; inblk=0}
            {
              if ($0==start){
                if(seen==0){ print $0; inblk=1; seen=1 }
                next
              }
              if ($0==end){
                if(inblk==1){ print $0; inblk=0 }
                next
              }
              if(inblk==0) print
            }
          ' "$README" > "$README.tmp" && mv "$README.tmp" "$README"

      # 2) В каждом cheatsheet — placeholder doctoc сразу после H1 (если ещё нет)
      - name: Ensure doctoc placeholders after first H1
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(find cheatsheets -type f -name '*.md' | sort)
          for F in "${FILES[@]}"; do
            if ! grep -q "START doctoc" "$F"; then
              awk '
                BEGIN{done=0}
                done==0 && /^# /{
                  print; print ""; print "<!-- START doctoc -->"; print "<!-- END doctoc -->"; print ""; done=1; next
                }
                {print}
              ' "$F" > "$F.tmp" && mv "$F.tmp" "$F"
            fi
          done

      # 3) Сгенерировать doctoc внутри всех cheatsheets
      - name: Generate TOC in cheatsheets
        run: npx -y doctoc cheatsheets --github --maxlevel 3 --title "## Оглавление"

      # 4) Собрать раскрывающийся список в README
      - name: Inject cheatsheets TOC into README (<details> with inner toc)
        shell: bash
        run: |
          set -euo pipefail
          README="README.md"
          START="<!-- START:cheatsheets-toc -->"
          END="<!-- END:cheatsheets-toc -->"

          TMP="README.new"; : > "$TMP"

          mapfile -t FILES < <(find cheatsheets -type f -name '*.md' | sort)
          for F in "${FILES[@]}"; do
            REL="$F"
            TITLE="$(grep -m1 -E '^# ' "$F" | sed 's/^# \+//; s/\r$//')"
            if [[ -z "$TITLE" ]]; then
              BASE="$(basename "$F" .md)"; TITLE="$(echo "$BASE" | sed 's/-/ /g; s/\b\(.\)/\u\1/g')"
            fi

            # Вырезаем doctoc-блок: и короткий, и «generated TOC…»
            TOC="$(awk '
              /<!--[[:space:]]*START[[:space:]]+doctoc/ {on=1; next}
              /<!--[[:space:]]*END[[:space:]]+doctoc/   {on=0}
              on {print}
            ' "$F" \
              | sed -E '1{/^##[[:space:]]+(Оглавление|Table of Contents)$/d;}' \
              | sed -E "/^<!--/d" \
              | sed -E "s#\\]\\(#\\]\\($REL#"#)"

            {
              echo "<details>"
              printf '  <summary><strong><a href="%s">%s</a></strong></summary>\n\n' "$REL" "$TITLE"
              printf '%s\n\n' "$TOC"
              echo "</details>"
              echo
            } >> "$TMP"
          done

          # Подменяем содержимое между маркерами на наш контент
          awk -v start="$START" -v end="$END" '
            BEGIN{inblk=0; wrote=0}
            {
              if($0==start && wrote==0){
                print start
                while((getline l<"README.new")>0) print l
                inblk=1; wrote=1; next
              }
              if($0==end && inblk==1){ inblk=0; print end; next }
              if(inblk==0) print
            }
          ' "$README" > "$README.tmp" && mv "$README.tmp" "$README"

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs(toc): auto update cheatsheets TOC"
          file_pattern: |
            cheatsheets/**/*.md
            README.md
