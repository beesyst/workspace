# workspace/.github/workflows/toc.yml
name: Auto Cheatsheets TOC

on:
  push:
    branches: [ main ]
    paths:
      - 'cheatsheets/**/*.md'
      - 'README.md'
      - '.github/workflows/toc.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-toc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Гарантируем плейсхолдеры doctoc сразу после первого H1
      - name: Ensure doctoc placeholders exist after first H1
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(find cheatsheets -type f -name '*.md' | sort)
          for FILE in "${FILES[@]}"; do
            if ! grep -q "<!-- START doctoc" "$FILE"; then
              awk '
                BEGIN{placed=0}
                placed==0 && /^# / {
                  print
                  print ""
                  print "<!-- START doctoc -->"
                  print "<!-- END doctoc -->"
                  print ""
                  placed=1
                  next
                }
                { print }
              ' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
            fi
          done

      - name: Generate TOC inside cheatsheets
        run: npx -y doctoc cheatsheets --github --maxlevel 3 --title "## Оглавление"

      # Формируем ОТКРЫТЫЙ список в README — без <details> и без строки "Оглавление"
      - name: Inject cheatsheets TOC into README (open list)
        shell: bash
        run: |
          set -euo pipefail

          README="README.md"
          TMP="README.list"
          : > "$TMP"

          # Собираем все шпаргалки
          mapfile -t FILES < <(find cheatsheets -type f -name '*.md' | sort)
          for FILE in "${FILES[@]}"; do
            REL="$FILE"
            # Заголовок H1 как название (или fallback из имени файла)
            TITLE="$(grep -m1 -E '^# ' "$FILE" | sed 's/^# \+//; s/\r$//')"
            if [[ -z "$TITLE" ]]; then
              BASE="$(basename "$FILE" .md)"
              TITLE="$(echo "$BASE" | sed 's/-/ /g; s/\b\(.\)/\u\1/g')"
            fi

            # Тело doctoc: убираем первую строку "## Оглавление" и HTML-комменты, чиним якоря
            TOC_CONTENT="$(
              awk '/<!-- START doctoc -->/{f=1;next} /<!-- END doctoc -->/{f=0} f' "$FILE" \
              | sed -E '1{/^##[[:space:]]+(Оглавление|Table of Contents)$/Id;}' \
              | sed -E '/^<!--/d' \
              | sed "s|](#|]($REL#|g"
            )"

            # Родительский пункт
            echo "- [$TITLE]($REL)" >> "$TMP"
            # Пустая строка — чтобы GitHub корректно отрисовал вложенный список
            echo >> "$TMP"

            # Вложенный список: 4 пробела отступ
            if [[ -n "$TOC_CONTENT" ]]; then
              printf '%s\n' "$TOC_CONTENT" | sed 's/^/    /' >> "$TMP"
              echo >> "$TMP"
            fi
          done

          # Жёсткая замена содержимого между маркерами.
          # Ищем маркеры по подстроке — любые пробелы/форматирование не мешают.
          awk '
            BEGIN { inblk=0 }
            {
              if (index($0,"START:cheatsheets-toc")>0) {
                print "<!-- START:cheatsheets-toc -->"
                while ((getline l < "README.list") > 0) print l
                inblk=1
                next
              }
              if (index($0,"END:cheatsheets-toc")>0) {
                inblk=0
                print "<!-- END:cheatsheets-toc -->"
                next
              }
              if (!inblk) print
            }
          ' "$README" > "${README}.tmp"

          mv "${README}.tmp" "$README"

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs(toc): open TOC list in README (no <details>)"
          file_pattern: |
            cheatsheets/**/*.md
            README.md
