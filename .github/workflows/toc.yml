# workspace/.github/workflows/toc.yml
name: Auto Cheatsheets TOC

on:
  push:
    branches: [ main ]
    paths:
      - 'cheatsheets/**/*.md'
      - 'README.md'
      - '.github/workflows/toc.yml'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-toc:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Ensure doctoc placeholders exist after first H1
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t FILES < <(find cheatsheets -type f -name '*.md' | sort)
          for FILE in "${FILES[@]}"; do
            if ! grep -q "<!-- START doctoc" "$FILE"; then
              awk '
                BEGIN{placed=0}
                placed==0 && /^# / {
                  print
                  print ""
                  print "<!-- START doctoc -->"
                  print "<!-- END doctoc -->"
                  print ""
                  placed=1
                  next
                }
                { print }
              ' "$FILE" > "$FILE.tmp" && mv "$FILE.tmp" "$FILE"
            fi
          done

      - name: Generate TOC inside cheatsheets
        run: npx -y doctoc cheatsheets --github --maxlevel 3 --title "## Оглавление"

      - name: Inject cheatsheets TOC into README (open list, robust replace)
        shell: bash
        run: |
          set -euo pipefail

          README="README.md"
          START_RE="^\\s*<!--\\s*START:cheatsheets-toc\\s*-->\\s*$"
          END_RE="^\\s*<!--\\s*END:cheatsheets-toc\\s*-->\\s*$"

          TMP="README.list"
          : > "$TMP"

          # Собрать открытый список
          mapfile -t FILES < <(find cheatsheets -type f -name '*.md' | sort)
          for FILE in "${FILES[@]}"; do
            REL="$FILE"
            TITLE="$(grep -m1 -E '^# ' "$FILE" | sed 's/^# \+//; s/\r$//')"
            if [[ -z "$TITLE" ]]; then
              BASE="$(basename "$FILE" .md)"
              TITLE="$(echo "$BASE" | sed 's/-/ /g; s/\b\(.\)/\u\1/g')"
            fi

            TOC_CONTENT="$(
              awk '/<!-- START doctoc -->/{f=1;next} /<!-- END doctoc -->/{f=0} f' "$FILE" \
              | sed -E '1{/^##[[:space:]]+(Оглавление|Table of Contents)$/Id;}' \
              | sed -E '/^<!--/d' \
              | sed "s|](#|]($REL#|g"
            )"

            echo "- [$TITLE]($REL)" >> "$TMP"
            if [[ -n "$TOC_CONTENT" ]]; then
              printf '%s\n' "$TOC_CONTENT" | sed 's/^/    /' >> "$TMP"
            fi
            echo >> "$TMP"
          done

          # Гарантированно заменить содержимое между маркерами (по регулярке),
          # и подчистить любые <details>/<summary> внутри блока.
          awk -v start_re="$START_RE" -v end_re="$END_RE" '
            BEGIN { inblk=0 }
            $0 ~ start_re {
              print $0
              while ((getline l < "README.list") > 0) print l
              inblk=1
              next
            }
            $0 ~ end_re {
              inblk=0
              print $0
              next
            }
            {
              if (!inblk) print
            }
          ' "$README" \
          | awk -v start_re="$START_RE" -v end_re="$END_RE" '
              BEGIN { inblk=0 }
              $0 ~ start_re { inblk=1; print; next }
              $0 ~ end_re   { inblk=0; print; next }
              {
                if (inblk==1) {
                  gsub(/<\\/?details>|<\\/?summary>/, "", $0)
                }
                print
              }
            ' > "${README}.tmp"

          mv "${README}.tmp" "$README"

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs(toc): open TOC list in README (no <details>)"
          file_pattern: |
            cheatsheets/**/*.md
            README.md
